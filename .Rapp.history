mod_data <- luna::getNASA(#
 product = product, start_date = sdate, end_date = edate, aoi = e_new, download = FALSE#
)
q()
library(luna)#
library(terra)
product <- "MCD43A1"
sdate <- "2020-09-16" #Set 'sdate' to 7 days after the desired date#
edate <- "2020-09-16" #Set 'edate' to 8 days before the desired date#
e <- terra::ext(427035, 509745, 5755275, 5800005)#
e_new <- terra::project(#
  e, from = "+proj=utm +zone=11 +ellps=WGS84 +units=m +no_defs +type=crs",#
  to = "+proj=longlat +datum=WGS84 +no_defs"#
)#
datadir <- "/Users/pablo/Documents/PhD/Athabasca/MCD43"#
usr <- "pablo.fuchs"#
pwd <- "Pfadfindern02"
mod_data <- luna::getNASA(#
	product = product, start_date = sdate, end_date = edate, aoi = e_new,#
	download = TRUE, overwrite = TRUE, path = datadir, username = usr, password = pwd#
)
e_new
mod_data <- luna::getNASA(#
  product = product, start_date = sdate, end_date = edate, aoi = e_new, download = FALSE#
)
mod_data
mod_data <- luna::getNASA(#
	product = product, start_date = sdate, end_date = edate, aoi = e_new,#
	download = TRUE, overwrite = TRUE, path = datadir, username = usr, password = pwd#
)
q()
modis_dir <- "./Documents/PhD/Athabasca/MCD43"
modis_files <- list.files(path = modis_dir, full.names = TRUE)
modis_files
modis_data <- terra::sds(modis_files[40])
modis_data
modis_data[[1]]
modis_data[[12]]
library(terra)
writeRaster(modis_data[[12]],filename="./Documents/PhD/Athabasca/modis.tif")
768/2
384*50
q()
site <- rep("Athabasca_iceAWS", 20)
site
library(terra)
aws<-vect("./Documents/PhD/Athabasca/Athabasca_iceAWS.shp")
aws
plot(aws)
lon <- rep(-117.3, 20)#
lat <- rep(52.19, 20)
lon
lat
t <- c(#
  "2015-05-08 18:41", "2020-03-18 18:41", "2020-07-31 18:47", "2020-08-16 18:47", "2016-05-15 18:53",#
  "2016-06-04 18:54", "2016-09-12 18:50", "2017-07-29 18:58", "2017-08-06 19:08", "2017-08-11 19:03",#
  "2017-09-27 18:58", "2017-10-05 19:02", "2018-03-11 18:52", "2018-03-24 19:03", "2018-03-31 18:49",#
  "2018-04-23 18:59", "2018-04-25 18:58", "2018-05-13 19:04", "2018-05-23 19:07", "2018-06-17 19:02",#
  "2018-06-19 18:55", "2018-07-17 18:59", "2018-07-29 18:51", "2018-08-08 18:58", "2018-08-21 18:59",#
  "2018-09-05 19:05", "2019-03-19 19:10", "2019-03-21 19:00", "2019-03-29 19:10", "2019-04-25 19:00",#
  "2019-05-20 19:00", "2019-05-28 19:10", "2019-07-22 19:10", "2019-08-28 19:00", "2019-09-05 19:10",#
  "2020-05-19 19:00", "2020-07-26 19:10", "2020-07-28 19:00", "2020-08-05 19:10", "2020-09-09 19:10"#
)#
site <- rep("Athabasca_iceAWS", 20)#
)#
lon <- rep(-117.252, 20)#
lat <- rep(52.1918, 20)#
SW_meas <- c(#
  898.09, 637.17, 913.30, 815.27, 894.55,#
  920.71, 663.41, 800.02, 811.50, 800.52,#
  508.31, 416.29, 391.34, 645.91, 766.36,#
  792.02, 800.01, 836.18, 948.80, 955.29,#
  957.98, 914.14, 860.96, 863.04, 635.94,#
  717.85, 602.47, 639.79, 679.38, 836.61,#
  895.54, 858.60, 900.69, 754.64, 718.37,#
  928.46, 928.85, 925.06, 928.79, 729.92#
)#
df <- data.frame(SW_meas, t, lon, lat, site)
df
q()
library(doParallel)
doParallel::registerDoParallel(cores=3)
doParallel::registerDoParallel(cores = 3)
getDoParWorkers()
getDoParRegistered()
q()
library(SatRbedo)
library(help=SatRbedo)
??snow_or_ice
q()
??f_BRDF
??albedo_sat
q()
t <- c(#
  "2015-05-08 18:41", "2020-03-18 18:41", "2020-07-31 18:47", "2020-08-16 18:47", "2016-05-15 18:53",#
  "2016-06-04 18:54", "2016-09-12 18:50", "2017-07-29 18:58", "2017-08-06 19:08", "2017-08-11 19:03",#
  "2017-09-27 18:58", "2017-10-05 19:02", "2018-03-11 18:52", "2018-03-24 19:03", "2018-03-31 18:49",#
  "2018-04-23 18:59", "2018-04-25 18:58", "2018-05-13 19:04", "2018-05-23 19:07", "2018-06-17 19:02",#
  "2018-06-19 18:55", "2018-07-17 18:59", "2018-07-29 18:51", "2018-08-08 18:58", "2018-08-21 18:59",#
  "2018-09-05 19:05", "2019-03-19 19:10", "2019-03-21 19:00", "2019-03-29 19:10", "2019-04-25 19:00",#
  "2019-05-20 19:00", "2019-05-28 19:10", "2019-07-22 19:10", "2019-08-28 19:00", "2019-09-05 19:10",#
  "2020-05-19 19:00", "2020-07-26 19:10", "2020-07-28 19:00", "2020-08-05 19:10", "2020-09-09 19:10"#
)
site <- rep("Athabasca_iceAWS", 20)#
lon <- rep(-117.252, 20)#
lat <- rep(52.1918, 20)
SW_meas <- c(#
  898.09, 637.17, 913.30, 815.27, 894.55,#
  920.71, 663.41, 800.02, 811.50, 800.52,#
  508.31, 416.29, 391.34, 645.91, 766.36,#
  792.02, 800.01, 836.18, 948.80, 955.29,#
  957.98, 914.14, 860.96, 863.04, 635.94,#
  717.85, 602.47, 639.79, 679.38, 836.61,#
  895.54, 858.60, 900.69, 754.64, 718.37,#
  928.46, 928.85, 925.06, 928.79, 729.92#
)#
df <- data.frame(SW_meas, t, lon, lat, site)
df
q()
t <- c(#
  "2014-07-11 14:34", "2015-11-19 14:35", "2016-04-27 14:34", "2016-05-29 14:34", "2017-06-17 14:34",#
  "2017-08-04 14:35", "2017-08-20 14:35", "2017-09-21 14:35", "2019-06-07 14:34", "2019-06-23 14:34",#
  "2016-03-18 14:55", "2016-05-17 14:55", "2016-08-05 14:55", "2016-08-25 14:47", "2016-11-13 14:52",#
  "2016-11-23 14:51", "2017-06-01 14:47", "2017-06-21 14:47", "2017-07-11 14:47", "2017-07-16 14:50",#
  "2017-07-31 14:47", "2017-08-05 14:51", "2017-08-25 14:56", "2017-09-29 14:53", "2017-10-04 14:55",#
  "2017-11-18 14:50", "2017-12-13 14:55", "2018-04-12 14:47", "2018-04-17 14:48", "2018-04-22 14:56",#
  "2018-05-02 14:56", "2019-01-07 14:57", "2019-03-23 14:57", "2019-05-17 14:57", "2019-05-27 14:57",#
  "2019-06-01 14:57", "2019-06-06 14:57", "2019-06-11 14:57", "2019-06-21 14:57", "2019-06-26 14:57",#
  "2019-08-15 14:57", "2019-08-20 14:57", "2019-08-30 14:57",#
)#
site <- rep("AWS_Zongo", 43)#
lon <- rep(-68.142, 43)#
lat <- rep(-16.279, 43)#
SW_meas <- c(#
  734.80, 882.00, 924.83, 879.18, 801.21,#
  838.96, 863.38, 1022.94, 760.32, 757.60,#
  1106.66, 951.49, 960.99, 932.66, 1228.38,#
  1187.52, 906.41, 839.20, 872.67, 863.41,#
  896.82, 892.17, 938.26, 1183.41, 1159.52,#
  1251.91, 1250.84, 1105.66, 1083.06, 1069.50,#
  1017.97, 1145.97, 1036.28, 895.93, 827.22,#
  810.04, 838.18, 607.53, 817.27, 828.39,#
  934.55, 981.66, 1054.14#
)#
df <- data.frame(SW_meas, t, lon, lat, site)
SW_meas
t
t <- c(#
  "2014-07-11 14:34", "2015-11-19 14:35", "2016-04-27 14:34", "2016-05-29 14:34", "2017-06-17 14:34",#
  "2017-08-04 14:35", "2017-08-20 14:35", "2017-09-21 14:35", "2019-06-07 14:34", "2019-06-23 14:34",#
  "2016-03-18 14:55", "2016-05-17 14:55", "2016-08-05 14:55", "2016-08-25 14:47", "2016-11-13 14:52",#
  "2016-11-23 14:51", "2017-06-01 14:47", "2017-06-21 14:47", "2017-07-11 14:47", "2017-07-16 14:50",#
  "2017-07-31 14:47", "2017-08-05 14:51", "2017-08-25 14:56", "2017-09-29 14:53", "2017-10-04 14:55",#
  "2017-11-18 14:50", "2017-12-13 14:55", "2018-04-12 14:47", "2018-04-17 14:48", "2018-04-22 14:56",#
  "2018-05-02 14:56", "2019-01-07 14:57", "2019-03-23 14:57", "2019-05-17 14:57", "2019-05-27 14:57",#
  "2019-06-01 14:57", "2019-06-06 14:57", "2019-06-11 14:57", "2019-06-21 14:57", "2019-06-26 14:57",#
  "2019-08-15 14:57", "2019-08-20 14:57", "2019-08-30 14:57",#
)
t <- c(#
  "2014-07-11 14:34", "2015-11-19 14:35", "2016-04-27 14:34", "2016-05-29 14:34", "2017-06-17 14:34",#
  "2017-08-04 14:35", "2017-08-20 14:35", "2017-09-21 14:35", "2019-06-07 14:34", "2019-06-23 14:34",#
  "2016-03-18 14:55", "2016-05-17 14:55", "2016-08-05 14:55", "2016-08-25 14:47", "2016-11-13 14:52",#
  "2016-11-23 14:51", "2017-06-01 14:47", "2017-06-21 14:47", "2017-07-11 14:47", "2017-07-16 14:50",#
  "2017-07-31 14:47", "2017-08-05 14:51", "2017-08-25 14:56", "2017-09-29 14:53", "2017-10-04 14:55",#
  "2017-11-18 14:50", "2017-12-13 14:55", "2018-04-12 14:47", "2018-04-17 14:48", "2018-04-22 14:56",#
  "2018-05-02 14:56", "2019-01-07 14:57", "2019-03-23 14:57", "2019-05-17 14:57", "2019-05-27 14:57",#
  "2019-06-01 14:57", "2019-06-06 14:57", "2019-06-11 14:57", "2019-06-21 14:57", "2019-06-26 14:57",#
  "2019-08-15 14:57", "2019-08-20 14:57", "2019-08-30 14:57"#
)#
site <- rep("AWS_Zongo", 43)#
lon <- rep(-68.142, 43)#
lat <- rep(-16.279, 43)#
SW_meas <- c(#
  734.80, 882.00, 924.83, 879.18, 801.21,#
  838.96, 863.38, 1022.94, 760.32, 757.60,#
  1106.66, 951.49, 960.99, 932.66, 1228.38,#
  1187.52, 906.41, 839.20, 872.67, 863.41,#
  896.82, 892.17, 938.26, 1183.41, 1159.52,#
  1251.91, 1250.84, 1105.66, 1083.06, 1069.50,#
  1017.97, 1145.97, 1036.28, 895.93, 827.22,#
  810.04, 838.18, 607.53, 817.27, 828.39,#
  934.55, 981.66, 1054.14#
)#
df <- data.frame(SW_meas, t, lon, lat, site)
df
q()
library(SatRbedo)
library(help=SatRbedo)
??preproc
library(help=SatRbedo)
??preproc
q()
e <- terra::ext(427005, 509745, 5755245, 5800005)
e
q()
t <- c(#
  "2021-11-20 10:04", "2022-01-15 10:04", "2022-07-18 10:04", "2022-10-06 10:04", "2022-11-23 10:04",#
  "2023-09-07 10:04", "2023-10-01 10:04", "2024-01-29 10:04", "2021-11-24 10:17", "2021-12-19 10:17",#
  "2022-01-13 10:17", "2022-01-18 10:17", "2022-01-23 10:17", "2022-03-09 10:18", "2022-03-14 10:17",#
  "2022-03-19 10:18", "2022-03-24 10:17", "2022-04-13 10:17", "2022-04-18 10:18", "2022-04-28 10:18",#
  "2022-07-02 10:18", "2022-07-17 10:18", "2022-10-05 10:18", "2022-10-25 10:18", "2022-10-30 10:17",#
  "2023-02-12 10:17", "2023-08-11 10:18", "2023-09-10 10:18", "2023-09-25 10:18", "2024-01-28 10:17",#
  "2024-04-12 10:17", "2024-07-31 10:18", "2024-08-10 10:18"#
)#
site <- rep("AWS_HEF30", 33)#
lon <- rep(10.7487, 33)#
lat <- rep(46.7910, 33)#
SW_meas <- c(#
  495.13, 466.46, 1020.92, 661.56, 444.34,#
  752.66, 679.01, 428.41, 468.48, 381.93,#
  462.86, 490.86, 512.43, 789.34, 831.33,#
  854.58, 879.75, 952.23, 980.99, 1033.76,#
  1028.46, 1023.22, 674.39, 570.84, 455.50,#
  563.63, 936.02, 715.49, 734.09, 433.75,#
  810.24, 288.15, 876.07#
)#
df <- data.frame(SW_meas, t, lon, lat, site)
df
plot(df$t,df$SW_meas)
df$t
plot(as.Date(df$t),df$SW_meas)
??plot
plot(as.Date(df$t),df$SW_meas, type="l")
plot(as.Date(sort(df$t)),df$SW_meas, type="l")
q()
library(SatRbedo)
??f_BRDF
q()
1309*1062
1309*1062*30
1309/30
1309*1062*30*30
ID	VALUE	NAME	AREA#
1	1.000000	1	691539300.000000
691539300/(1309*1062*30*30)
*100
691539300/(1309*1062*30*30)*100
ID	VALUE	NAME	AREA#
1	1.000000	1	797373000.000000
7.97373e+08
7.97373e+08/(1309*1062*30*30)*100
1.7482e+09/(1912*2048*30*30)
1.22199e+09/(1912*2048*30*30)
9.68328e+08/(1912*2048*30*30)
7.06024e+08/(2339*1177*30*30)
q*
q()
7489.46-3497.86
3991.6*0.7
3991.6*0.6
q()
library(SatRbedo)
??shadow_removal
??topo_corr
??albedo_sat
f_BRDF
library()
library(SatRbedo)
??albedo_sat
??snow_or_ice
??cfactor_BRDF
??topo_corr
??albedo_sat
q()
library(SatRbedo)
??albedo_sat
q()
library(stringr)#
library(terra)#
library(xml2)#
library(XML)#
library(SatRbedo)#
library(doParallel)
files <- list.files(path = "./Documents/PhD/Tasman2/L30/2018/59/G/M/M/HLS.L30.T59GMM.2018193T221908.v2.0", full.names = TRUE)
files
metadata <- stringr::str_subset(files, "xml")
metadata
md <- xml2::read_xml(metadata)
md
date_f <- stringr::str_sub(#
  xml2::xml_text(xml2::xml_find_all(md, "//BeginningDateTime")), 1, 10#
)
date_f
sensor <- stringr::str_sub(#
  xml2::xml_text(xml2::xml_find_all(md, "//GranuleUR")), 5, 7#
)
sensor
NSZA <- xml2::xml_double(xml2::xml_find_all(md,#
  "/Granule/AdditionalAttributes/AdditionalAttribute[24]/Values/Value"))
NSZA
q()
library(SatRbedo)
??f_BRDF
q()
# install.package('remotes')#
remotes::install_github('coolbutuseless/simplefortran')
q()
remove.packages(SatRbedo)
remove.packages("SatRbedo")
remove.packages("EBImage")
librayr(EBImage)
library(EBImage)
# install.packages("devtools")#
devtools::install_github("pabl1t0x/SatRbedo")
library(EBImage)
library(SatRbedo)
q()
library(covr)
package_coverage("./Documents/PhD/SatRbedo/")
package_coverage("./Documents/PhD/SatRbedo/", quiet=FALSE)
sessionInfo()
q()
library(covr)
package_coverage("./Documents/PhD/SatRbedo/")
q()
citation("terra")
q()
library(SunCalcMeeus)
library(help=SunCalcMeeus)
??as_tod
360/364
90*pi/180
sin(45)
sin(45*pi/180)
15*9
asin(0.5)
asin(0.5) * 180/pi
??ifelse
asin
acos
100000*(1-300*0.0001)
100*100/1000
100000*(1-300*10)
100000-300*10
100000/(100000*(1-300*0.0001))
1/1.030928
97000/100000
10/100000
1-0.0001*300
1e-04
90*pi/180
min(1,3,4)
??min
min
class(min)
min(3/4, 0.22)
n <- 0.8
D_f <- ifelse(n > 0.8, 0.8, 0.65 * max(n, 0) + 0.15)
D_f
n <- 0.81
D_f
D_f <- ifelse(n > 0.8, 0.8, 0.65 * max(n, 0) + 0.15)
D_f
n <- 0.6
D_f <- ifelse(n > 0.8, 0.8, 0.65 * max(n, 0) + 0.15)
D_f
library(styler)
style_file("./Documents/PhD/Tasman_spts/spatiotemporal_analysis/SW_melt.R")
SW_net <- function(J, t, time_diff, DST, lon, lat, elev, SW, slp, asp, we) {#
  day_ang <- J * 360 / 365.25 # day angle#
  EOT <- -0.128 * sin((day_ang - 2.8) * pi / 180) -#
    0.165 * sin((2 * day_ang + 19.7) * pi / 180) # equation of time#
  LSTM <- 15 * time_diff # local standard time meridian#
  LST <- t + (lon - LSTM) / 15 + EOT - DST # local solar time#
  delta <- 0.3948 - 23.2559 * cos((J * 360 / 365 + 9.1) * pi / 180) -#
    0.3915 * cos((2 * J * 360 / 365 + 5.4) * pi / 180) -#
    0.1764 * cos((3 * J * 360 / 365 + 26) * pi / 180) # solar declination#
  omega <- 15 * (LST - 12) # hour angle#
  h <- asin(cos(lat * pi / 180) * cos(delta * pi / 180) * cos(omega * pi / 180) +#
    sin(lat * pi / 180) * sin(delta * pi / 180)) # solar elevation angle#
  cos_alpha <- (sin(lat * pi / 180) * sin(h) - sin(delta * pi / 180)) /#
    (cos(lat * pi / 180) * cos(h)) # cosine of solar azimuth angle#
  sin_alpha <- (cos(delta * pi / 180) * sin(omega * pi / 180)) / cos(h) # sine of solar azimuth angle#
  alpha <- ifelse(sin_alpha < 0, -acos(cos_alpha), acos(cos_alpha))#
  K <- 1368 * 0.75^(1 - 1e-04 * elev) * cos(1.57 - h) # theoretical maximum SWin under cloud-free sky#
  n <- min(1 - SW / K, 1) # cloudiness#
  D_f <- ifelse(n > 0.8, 0.8, 0.65 * max(n, 0) + 0.15) # fraction of diffuse SW#
  SW_normal <- SW / sin(h) # radiation received by a surface normal to the sun's rays#
  SW_dir <- (1 - D_f) * SW_normal *#
    (sin(h) * cos(slp * pi / 180) + cos(h) * sin(slp * pi / 180) * cos(alpha - asp * pi / 180)) # direct SW#
  SW_diff <- D_f * SW * (cos(slp * pi / 360))^2 + alb * SW * (sin(slp * pi / 360))^2 # diffuse SW#
  if (we) {#
    res <- (1 - alb) * SW_dir + (1 - alb) * SW_diff#
  } else {#
    res <- ((1 - alb) * SW_dir + (1 - alb) * SW_diff) * 0.0107784#
  }#
  res#
}
a<-SW_net(178,100,0,0,-19.5,63.5,300,1.572,3,90,we=FALSE)
SW_net <- function(J, t, time_diff, DST, lon, lat, elev, SW, slp, asp, alb, we) {#
  day_ang <- J * 360 / 365.25 # day angle#
  EOT <- -0.128 * sin((day_ang - 2.8) * pi / 180) -#
    0.165 * sin((2 * day_ang + 19.7) * pi / 180) # equation of time#
  LSTM <- 15 * time_diff # local standard time meridian#
  LST <- t + (lon - LSTM) / 15 + EOT - DST # local solar time#
  delta <- 0.3948 - 23.2559 * cos((J * 360 / 365 + 9.1) * pi / 180) -#
    0.3915 * cos((2 * J * 360 / 365 + 5.4) * pi / 180) -#
    0.1764 * cos((3 * J * 360 / 365 + 26) * pi / 180) # solar declination#
  omega <- 15 * (LST - 12) # hour angle#
  h <- asin(cos(lat * pi / 180) * cos(delta * pi / 180) * cos(omega * pi / 180) +#
    sin(lat * pi / 180) * sin(delta * pi / 180)) # solar elevation angle#
  cos_alpha <- (sin(lat * pi / 180) * sin(h) - sin(delta * pi / 180)) /#
    (cos(lat * pi / 180) * cos(h)) # cosine of solar azimuth angle#
  sin_alpha <- (cos(delta * pi / 180) * sin(omega * pi / 180)) / cos(h) # sine of solar azimuth angle#
  alpha <- ifelse(sin_alpha < 0, -acos(cos_alpha), acos(cos_alpha))#
  K <- 1368 * 0.75^(1 - 1e-04 * elev) * cos(1.57 - h) # theoretical maximum SWin under cloud-free sky#
  n <- min(1 - SW / K, 1) # cloudiness#
  D_f <- ifelse(n > 0.8, 0.8, 0.65 * max(n, 0) + 0.15) # fraction of diffuse SW#
  SW_normal <- SW / sin(h) # radiation received by a surface normal to the sun's rays#
  SW_dir <- (1 - D_f) * SW_normal *#
    (sin(h) * cos(slp * pi / 180) + cos(h) * sin(slp * pi / 180) * cos(alpha - asp * pi / 180)) # direct SW#
  SW_diff <- D_f * SW * (cos(slp * pi / 360))^2 + alb * SW * (sin(slp * pi / 360))^2 # diffuse SW#
  if (we) {#
    res <- (1 - alb) * SW_dir + (1 - alb) * SW_diff#
  } else {#
    res <- ((1 - alb) * SW_dir + (1 - alb) * SW_diff) * 0.0107784#
  }#
  res#
}
a<-SW_net(178,100,0,0,-19.5,63.5,300,1.572,3,90,0.31,we=FALSE)
a
a<-SW_net(178,100,0,0,-19.5,63.5,300,1.572,3,90,0.31,we=TRUE)
a
a<-SW_net(178,100,0,0,-19.5,63.5,300,300,3,90,0.31,we=FALSE)
a
a<-SW_net(178,100,0,0,-19.5,63.5,300,300,3,90,0.31,we=TRUE)
a
SW_net <- function(J, t, time_diff, DST, lon, lat, elev, SW, slp, asp, alb, we) {#
  day_ang <- J * 360 / 365.25 # day angle#
  EOT <- -0.128 * sin((day_ang - 2.8) * pi / 180) -#
    0.165 * sin((2 * day_ang + 19.7) * pi / 180) # equation of time#
  LSTM <- 15 * time_diff # local standard time meridian#
  LST <- t + (lon - LSTM) / 15 + EOT - DST # local solar time#
  delta <- 0.3948 - 23.2559 * cos((J * 360 / 365 + 9.1) * pi / 180) -#
    0.3915 * cos((2 * J * 360 / 365 + 5.4) * pi / 180) -#
    0.1764 * cos((3 * J * 360 / 365 + 26) * pi / 180) # solar declination#
  omega <- 15 * (LST - 12) # hour angle#
  h <- asin(cos(lat * pi / 180) * cos(delta * pi / 180) * cos(omega * pi / 180) +#
    sin(lat * pi / 180) * sin(delta * pi / 180)) # solar elevation angle#
  cos_alpha <- (sin(lat * pi / 180) * sin(h) - sin(delta * pi / 180)) /#
    (cos(lat * pi / 180) * cos(h)) # cosine of solar azimuth angle#
  sin_alpha <- (cos(delta * pi / 180) * sin(omega * pi / 180)) / cos(h) # sine of solar azimuth angle#
  alpha <- ifelse(sin_alpha < 0, -acos(cos_alpha), acos(cos_alpha))#
  K <- 1368 * 0.75^(1 - 1e-04 * elev) * cos(1.57 - h) # theoretical maximum SWin under cloud-free sky#
  n <- min(1 - SW / K, 1) # cloudiness#
  D_f <- ifelse(n > 0.8, 0.8, 0.65 * max(n, 0) + 0.15) # fraction of diffuse SW#
  SW_normal <- SW / sin(h) # radiation received by a surface normal to the sun's rays#
  SW_dir <- (1 - D_f) * SW_normal *#
    (sin(h) * cos(slp * pi / 180) + cos(h) * sin(slp * pi / 180) * cos(alpha - asp * pi / 180)) # direct SW#
  SW_diff <- D_f * SW * (cos(slp * pi / 360))^2 + alb * SW * (sin(slp * pi / 360))^2 # diffuse SW#
  if (we) {#
    res <- ((1 - alb) * SW_dir + (1 - alb) * SW_diff) * 0.0107784#
  } else {#
    res <- ((1 - alb) * SW_dir + (1 - alb) * SW_diff) * 0.0107784#
  }#
  res#
}
a<-SW_net(178,100,0,0,-19.5,63.5,300,300,3,90,0.31,we=FALSE)
a
a<-SW_net(178,100,0,0,-19.5,63.5,300,300,3,90,0.31,we=TRUE)
a
SW_net <- function(J, t, time_diff, DST, lon, lat, elev, SW, slp, asp, alb, we) {#
  day_ang <- J * 360 / 365.25 # day angle#
  EOT <- -0.128 * sin((day_ang - 2.8) * pi / 180) -#
    0.165 * sin((2 * day_ang + 19.7) * pi / 180) # equation of time#
  LSTM <- 15 * time_diff # local standard time meridian#
  LST <- t + (lon - LSTM) / 15 + EOT - DST # local solar time#
  delta <- 0.3948 - 23.2559 * cos((J * 360 / 365 + 9.1) * pi / 180) -#
    0.3915 * cos((2 * J * 360 / 365 + 5.4) * pi / 180) -#
    0.1764 * cos((3 * J * 360 / 365 + 26) * pi / 180) # solar declination#
  omega <- 15 * (LST - 12) # hour angle#
  h <- asin(cos(lat * pi / 180) * cos(delta * pi / 180) * cos(omega * pi / 180) +#
    sin(lat * pi / 180) * sin(delta * pi / 180)) # solar elevation angle#
  cos_alpha <- (sin(lat * pi / 180) * sin(h) - sin(delta * pi / 180)) /#
    (cos(lat * pi / 180) * cos(h)) # cosine of solar azimuth angle#
  sin_alpha <- (cos(delta * pi / 180) * sin(omega * pi / 180)) / cos(h) # sine of solar azimuth angle#
  alpha <- ifelse(sin_alpha < 0, -acos(cos_alpha), acos(cos_alpha))#
  K <- 1368 * 0.75^(1 - 1e-04 * elev) * cos(1.57 - h) # theoretical maximum SWin under cloud-free sky#
  n <- min(1 - SW / K, 1) # cloudiness#
  D_f <- ifelse(n > 0.8, 0.8, 0.65 * max(n, 0) + 0.15) # fraction of diffuse SW#
  SW_normal <- SW / sin(h) # radiation received by a surface normal to the sun's rays#
  SW_dir <- (1 - D_f) * SW_normal *#
    (sin(h) * cos(slp * pi / 180) + cos(h) * sin(slp * pi / 180) * cos(alpha - asp * pi / 180)) # direct SW#
  SW_diff <- D_f * SW * (cos(slp * pi / 360))^2 + alb * SW * (sin(slp * pi / 360))^2 # diffuse SW#
  if (we) {#
    res <- ((1 - alb) * SW_dir + (1 - alb) * SW_diff) * 0.0107784#
  } else {#
    res <- (1 - alb) * SW_dir + (1 - alb) * SW_diff#
  }#
  res#
}
a<-SW_net(178,100,0,0,-19.5,63.5,300,300,3,90,0.31,we=FALSE)
a
a<-SW_net(178,100,0,0,-19.5,63.5,300,300,3,90,0.31,we=TRUE)
a
a<-SW_net(178,100,0,0,-19.5,63.5,300,300,3,90,0.31,we=FALSE)
a
q()
library(SatRbedo)
library(help=SatRbedo)
??NDSII_hist
??albedo_broad
??albedo_sat
??f_BRDF
??albedo_broad
??albedo_sat
??albedo_broad
??f_BRDF
??preporc
??preproc
??cfactor
??topo_corr
??cast_shadows
??hill_shade
??shadow_removal
??topo_splot
??f_BRDF
??snow_or_ice
??NDSII_hist
??albedo_sat
??f_BRDF
??albedo_broad
q()
library(devtools)
proj_activate("./Documents/PhD/SatRbedo/")
build_readme()
q()
